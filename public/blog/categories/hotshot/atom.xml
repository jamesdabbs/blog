<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hotshot | Blog | jdabbs.com]]></title>
  <link href="http://blog.jdabbs.com/blog/categories/hotshot/atom.xml" rel="self"/>
  <link href="http://blog.jdabbs.com/"/>
  <updated>2012-07-02T14:53:05-04:00</updated>
  <id>http://blog.jdabbs.com/</id>
  <author>
    <name><![CDATA[James Dabbs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wide Tables in Django]]></title>
    <link href="http://blog.jdabbs.com/blog/2012/06/25/wide-tables-in-django/"/>
    <updated>2012-06-25T00:05:00-04:00</updated>
    <id>http://blog.jdabbs.com/blog/2012/06/25/wide-tables-in-django</id>
    <content type="html"><![CDATA[<p>In this post, I'll discuss an exploration I recently did examining how Django
handles the sort of wide tables that may arise from dynamically created models.
Code is available
<a href="https://github.com/jamesdabbs/django-experiments/tree/master/wide_tables">on github</a>
if you'd like to follow along.</p>

<h2>Dynamic Models</h2>

<p>I've recently been working on a Django project which requires an extensible
user profile model: different organizations need to track different information
about users, and need to be able to configure that information on the fly.
There are several ways to approach this, including
<a href="http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">eav</a>
(presumably using <a href="https://github.com/mvpdev/django-eav">django-eav</a>), but I
wanted to consider a solution based on dynamically creating models - among
other considerations, having <code>ModelForms</code> "just work" would be a huge boon. I
hope to further explore dynamic models in a future post, but for now I'll just
summarize enough to tackle the question at hand: what kind of performance
should we expect as columns are added and the Profile table gets wider?</p>

<!-- more -->


<p> For further reading on dynamic models, refer to Will Hardy's
<a href="https://github.com/willhardy/dynamic-models">dynamic-models repository</a>
and <a href="http://dynamic-models.rtfd.org/">accompanying docs</a>.</p>

<h3>The Basics</h3>

<p>Django's models aren't magic. Well,
<a href="https://groups.google.com/forum/?fromgroups#!searchin/comp.lang.python/metaclasses$20are$20deeper$20magic/comp.lang.python/o61KSF77IWs/s09TqSEvTQgJ">they are</a>,
but that magic is well encapsulated: Django checks your models module(s) for
any subclasses of <code>django.db.models.Model</code> and maps each one to a table
in the database. For each such model, every subclass of
<code>django.db.models.Fields</code> attached to the model is mapped to a column in that
table. The model then provides a host of utilities for moving conveniently
between the python and database layers, but all it really needs is that
mapping. So while you would typically define a <code>Profile</code> model by doing
something like</p>

<p>``` python models.py
from django.db import models</p>

<p>class Profile(models.Model):</p>

<pre><code>user = models.ForeignKey('User')
birthday = models.DateField()
</code></pre>

<p>```</p>

<p>you could just as well use python's
<a href="http://docs.python.org/library/functions.html#type">type</a> function to re-write
that definition as</p>

<p>``` python models.py
from django.db import models</p>

<p>Profile = type('Profile', (models.Model,), {</p>

<pre><code>'user': models.ForeignKey('User'),
'birthday': models.DateField(),
'__module__': 'app.models'
</code></pre>

<p>})
<code>``
(The</code>'<strong>module</strong>'` key is a technical requirement.
<a href="http://dynamic-models.readthedocs.org/">RTFD</a> for more info.)</p>

<p>The basic idea for a dynamically extensible <code>Profile</code>, then, is to define a
<code>Column</code> model with a <code>to_field</code> method which creates a
<code>django.db.models.Field</code> instance corresponding to the column in question.
Then we can define</p>

<p>``` python models.py
...</p>

<p>attrs = {'<strong>module</strong>': 'app.models'}
for c in Column.objects.all():</p>

<pre><code>attrs[c.attr_name] = c.to_field()
</code></pre>

<p>Profile = type('Profile', (models.Model,), attrs)
```</p>

<p>There are a few potential pitfalls to be aware of, but that's a post for
another day. For now, we'll focus on the question at hand.</p>

<h2>Wide Tables</h2>

<p>The (potential) problem is that as <code>Column</code> objects are created, the <code>Profile</code>
model becomes more complicated and we may incur some non-trivial and
unnecessary overhead in instantiating each <code>Profile</code> object - especially if we
only care about a small subset of the database columns at any point in time. In
order to test just how significant those effects are, I've created a demo app
and tested several different functions using the
<a href="http://docs.python.org/library/hotshot.html">hotshot</a> module. For the purpose
of these tests, consider the following models:</p>

<p><div><script src='https://gist.github.com/2986726.js?file='></script>
<noscript><pre><code>from django.db import models


def get_column_attrs(width):
    &quot;&quot;&quot; Creates the specified number of fields and adds them to a dict,
        suitable to be used as a model's attrs
    &quot;&quot;&quot;
    attrs = dict(
        ('col_{}'.format(i), models.IntegerField(default=1))
        for i in range(0, width)
    )
    attrs['__module__'] = 'wide_tables.models'  # Needed internally by Django
    attrs['width'] = width  # Stored for later reference
    return attrs

# Dynamically define models with 10, 100, and 1000 columns, resp.
Small = type(&quot;Small&quot;, (models.Model,), get_column_attrs(10))
Medium = type(&quot;Medium&quot;, (models.Model,), get_column_attrs(100))
Large = type(&quot;Large&quot;, (models.Model,), get_column_attrs(1000))</code></pre></noscript></div>
</p>

<p>A copy of the project is available
<a href="https://github.com/jamesdabbs/django-experiments/tree/master/wide_tables">on github</a>.
A few choices were made to deliberately reflect the project I intend to use a
dynamic Profile in - a PostgreSQL database, simple but extant model field
defaults, no more than 1000 columns, etc. Feel free to tweak the tests to suit
your needs and re-run them with <code>manage.py wide_table_benchmarks</code>.</p>

<p>Each method below was run 1000 times against each model. The full hotshot
profiling results are available
<a href="https://github.com/jamesdabbs/django-experiments/blob/master/wide_tables/benchmarks.txt">in the repository</a>,
but I'll summarize the highlights. All times below are given in milliseconds (ms).</p>

<h3>Saving</h3>

<p>``` python</p>

<pre><code>model().save()
</code></pre>

<p>```</p>

<p>There isn't a whole lot to optimize here, but I had to create the objects
anyway to run the next tests, so I figured I may as well profile the initial
save and see where the time was being spent.</p>

<table class="data">
  <tr>
    <th>Model</th>
    <th>Time</th>
    <th colspan=2>_commit</th>
    <th colspan=2>execute</th>
    <th colspan=2>__init__</th>
  </tr>
  <tr>
    <td>Small</td>
    <td>13.340</td>
    <td>10.77</td>
    <td>80.7%</td>
    <td>1.259</td>
    <td>9.44%</td>
    <td>0.162</td>
    <td>1.21%</td>
  </tr>
  <tr>
    <td>Medium</td>
    <td>12.791</td>
    <td>6.196</td>
    <td>48.4%</td>
    <td>2.092</td>
    <td>16.4%</td>
    <td>0.758</td>
    <td>5.93%</td>
  </tr>
  <tr>
    <td>Large</td>
    <td>46.894</td>
    <td>10.245</td>
    <td>21.8%</td>
    <td>16.251</td>
    <td>34.7%</td>
    <td>4.815</td>
    <td>10.3%</td>
  </tr>
</table>


<p>Rather unsurprisingly, as the size of the model increases, the overhead of the
default transaction behavior (<code>_commit</code>) becomes less significant, while the
database calls themselves (<code>exectue</code>) and the model initialization (<code>__init__</code>)
take up increasingly large portions of the total execution time. Somewhat more
surprisingly, it actually took longer to save the <code>Small</code> model than the
<code>Medium</code> model; that warrants future investigation.</p>

<h3>Retrieving</h3>

<p>Django provides the
<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#values">values</a>
method to allow you to select from only a limited subset of columns. I tested
the usual retrieval method:</p>

<p>``` python</p>

<pre><code>A() = list(model.objects.all())  # list() forces evaluation of the QuerySet
</code></pre>

<p>```</p>

<p>against</p>

<p>``` python</p>

<pre><code>B(n) = list(model.objects.all().values(&lt;n columns&gt;))
</code></pre>

<p>```</p>

<p>for varying numbers of columns.</p>

<table class="data">
  <tr>
    <th>Model</th>
    <th>A()</th>
    <th>B(10)</th>
    <th>B(100)</th>
    <th>B(1000)</th>
  </tr>
  <tr>
    <td>Small</td>
    <td>26.988</td>
    <td>14.962</td>
    <td>&mdash;</td>
    <td>&mdash;</td>
  </tr>
  <tr>
    <td>Medium</td>
    <td>111.755</td>
    <td>14.932</td>
    <td>69.681</td>
    <td>&mdash;</td>
  </tr>
  <tr>
    <td>Large</td>
    <td>855.156</td>
    <td>16.778</td>
    <td>67.085</td>
    <td>407.569</td>
  </tr>
</table>


<p>As you may expect, the time it takes to retrieve and build an object
from the database grows fairly quickly with the number of columns, but if you
select a fixed number of columns, the time stays nearly flat. It's worth noting
that the time it takes to select <em>all</em> values from an object (returning a
<code>dict</code>) is about half the time it takes to retrieve the actual model. This
suggests that</p>

<ul>
<li>If you don't need to use model methods on retreived data, you can mitigate
the slowdown from wide tables by using <code>values</code>.</li>
<li>If you don't need to use model methods, you should probably be using <code>values</code>
no matter how wide your table is.</li>
</ul>


<h3>Updating</h3>

<p>Django 1.5 (in development as of this writing),
<a href="https://docs.djangoproject.com/en/dev/releases/1.5/">adds</a> an <code>update_fields</code>
argument to models' <code>save</code> methods, which only updates the specified columns.
This is useful in general, as it could help avoid some threading problems, but
you'd definitely expect to see some speedups when updating a few columns in
a wide table. As above, I tested the usual</p>

<p>``` python</p>

<pre><code>A() = obj.save()
</code></pre>

<p>```</p>

<p>against</p>

<p>``` python</p>

<pre><code>B(n) = obj.save(update_fields=&lt;n columns&gt;)
</code></pre>

<p>```</p>

<p>for varying numbers of columns.</p>

<table class="data">
  <tr>
    <th>Model</th>
    <th>A()</th>
    <th>B(10)</th>
    <th>B(100)</th>
    <th>B(1000)</th>
  </tr>
  <tr>
    <td>Small</td>
    <td>12.434</td>
    <td>12.542</td>
    <td>&mdash;</td>
    <td>&mdash;</td>
  </tr>
  <tr>
    <td>Medium</td>
    <td>23.812</td>
    <td>12.924</td>
    <td>20.21</td>
    <td>&mdash;</td>
  </tr>
  <tr>
    <td>Large</td>
    <td>46.161</td>
    <td>23.628</td>
    <td>23.301</td>
    <td>41.381</td>
  </tr>
</table>


<p>Here, unlike the retrieval test, the time taken for a full save and a save
manually specifying each field is comparable (which makes sense, since they're
doing essentially the same thing). If you know for certain that you've only
updated a certain subset of fields, though, you can realize some significant
gains by using <code>update_fields</code>.</p>

<h2>In Closing ...</h2>

<p>This experiment indicates that large dynamic models can perform reasonably well,
given judicious use of Django's lower-level database tools. It also suggests
some techniques that may be useful, regardless of how you're defining your
models:</p>

<ul>
<li>Use <code>values</code> if you only need an object's attributes, not a full model object</li>
<li>Use the <code>update_fields</code> argument on a model's <code>save</code> function if you know
that a certain subset of fields have been altered (e.g. if you're saving a
<code>ModelForm</code> that has defined a <code>fields</code> attribute)</li>
</ul>


<p>Hopefully, you've also gotten some ideas about how you can approach questions
that come up in your work. If you have any questions, comments, or suggestions
for future topics, chime in below.</p>
]]></content>
  </entry>
  
</feed>
